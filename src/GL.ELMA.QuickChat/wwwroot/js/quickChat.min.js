var ChatItemToMe = React.createClass({
    displayName: 'ChatItemToMe',


    render: function () {
        var messageDate = this.props.datetime;
        var messageAuthor = this.props.username;

        return React.createElement(
            'li',
            null,
            React.createElement(
                'div',
                { className: 'message-data' },
                React.createElement(
                    'span',
                    { className: 'message-data-name' },
                    React.createElement('i', { className: 'fa fa-circle online' }),
                    messageAuthor
                ),
                ' \xA0 \xA0',
                React.createElement(
                    'span',
                    { className: 'message-data-time' },
                    messageDate
                )
            ),
            React.createElement(
                'div',
                { className: 'message my-message' },
                this.props.text
            )
        );
    }

});
var ChatItemToOther = React.createClass({
    displayName: 'ChatItemToOther',


    render: function () {
        var messageDate = this.props.datetime;
        var messageAuthor = this.props.username;

        return React.createElement(
            'li',
            { className: 'clearfix' },
            React.createElement(
                'div',
                { className: 'message-data align-right' },
                React.createElement(
                    'span',
                    { className: 'message-data-time' },
                    messageDate
                ),
                ' \xA0 \xA0',
                React.createElement(
                    'span',
                    { className: 'message-data-name' },
                    messageAuthor
                ),
                ' ',
                React.createElement('i', { className: 'fa fa-circle me' })
            ),
            React.createElement(
                'div',
                { className: 'message other-message float-right' },
                this.props.text
            )
        );
    }

});
var ChatUser = React.createClass({
    displayName: 'ChatUser',


    getInitialState: function () {
        return {
            UserId: this.props.userId,
            UserName: this.props.username,
            ChatHub: this.props.chathub,
            CurrentUser: this.props.currentUser
        };
    },

    componentDidMount: function () {
        var userBtn = document.getElementById('userSelector' + this.state.UserId);
        userBtn.addEventListener('click', function (e) {
            this.addMessageWindow();
        }.bind(this));
    },

    addMessageWindow: function () {
        var chatWindow = document.getElementById(this.state.UserId);
        if (chatWindow == null) {
            var windowContainer = document.getElementById('chatWindowDiv');
            ReactDOM.render(React.createElement(ChatWindow, { username: this.state.UserName,
                userid: this.state.UserId,
                sendmessage: this.state.SendMessage,
                chathub: this.state.ChatHub,
                currentUser: this.state.CurrentUser }), windowContainer);
        } else {
            if ($(chatWindow).css('display') === 'none') {
                $(chatWindow).css('display', 'block');
            } else {
                $(chatWindow).css('display', 'none');
            }
        }
    },

    render: function () {
        return React.createElement(
            'li',
            { id: 'userLi' + this.state.UserId, key: $.guid++, className: 'clearfix' },
            React.createElement(
                'div',
                { id: 'userSelector' + this.state.UserId },
                React.createElement('img', { src: "https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_01.jpg", alt: 'avatar' }),
                React.createElement(
                    'div',
                    { className: "about" },
                    React.createElement(
                        'div',
                        { className: "name" },
                        this.state.UserName
                    ),
                    React.createElement(
                        'div',
                        { className: "status" },
                        React.createElement('i', { className: "fa fa-circle online" }),
                        ' online'
                    )
                )
            )
        );
    }

});
var ChatUsers = React.createClass({
    displayName: "ChatUsers",


    getInitialState: function () {
        return {
            ChatHub: this.props.chathub,
            Users: [],
            CurrentUserId: "",
            CurrentUserName: ""
        };
    },

    initializeUser: function () {
        var component = this;
        $.getJSON('./Chat/GetCurrentUser/').then(function (data) {
            component.setState({
                CurrentUserName: data.UserName,
                CurrentUserId: data.Id
            });
        });
    },

    pushUserList: function () {},

    componentWillMount: function () {
        this.initializeUser();
        this.state.ChatHub.client.pushUserList = this.pushUserList;
        var component = this;
        $.getJSON('./Chat/GetUsers/').then(function (data) {
            var users = JSON.parse(data);
            component.setState({
                Users: users
            });
        });
    },

    componentDidUpdate: function (prevProps, prevState) {
        var userSelector = $(ReactDOM.findDOMNode(this)).find("div[id^='userSelector']")[0];
        if (userSelector != undefined) {
            userSelector.click();
        }
    },

    componentDidMount: function () {},

    render: function () {
        var userLi = [];
        var i = 0;

        for (; i < this.state.Users.length; i++) {
            var user = this.state.Users[i];
            userLi.push(React.createElement(ChatUser, { key: i, username: user.UserName, userId: user.UserId, currentUser: this.state.CurrentUserId, chathub: this.state.ChatHub }));
        }

        return React.createElement(
            "div",
            { className: 'people-list', id: 'people-list' },
            React.createElement(
                "div",
                { className: 'search' },
                React.createElement("input", { type: 'text', placeholder: 'search' }),
                React.createElement("i", { className: 'fa fa-search' })
            ),
            React.createElement(
                "ul",
                { className: "list" },
                userLi
            )
        );
    }

});
var ChatWindow = React.createClass({
    displayName: 'ChatWindow',


    getInitialState: function () {
        return {
            UserId: this.props.userid,
            UserName: this.props.username,
            ChatHub: this.props.chathub,
            Messages: [],
            CurrentUser: this.props.currentUser
        };
    },

    pushNewMessage: function (id, userId, userName, message, dateTime) {
        var msgs = this.state.Messages;
        msgs.push({
            Id: id,
            UserId: userId,
            UserName: userName,
            Message: message,
            DateTime: dateTime
        });
        this.setState({
            Messages: msgs
        });
    },

    componentWillMount: function () {
        this.state.ChatHub.client.pushNewMessage = this.pushNewMessage;
        if ($.connection.hub && $.connection.hub.state === $.signalR.connectionState.disconnected) {
            $.connection.hub.qs = { "currentUserId": this.state.CurrentUser };
            $.connection.hub.start();
        }
    },

    createGuid: function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0,
                v = c === 'x' ? r : r & 0x3 | 0x8;
            return v.toString(16);
        });
    },

    sendMessage: function () {
        var $messageInput = document.getElementById('message-to-send');
        var message = $messageInput.value;
        var messageObj = {
            Id: this.createGuid(),
            ReceiverId: this.state.UserId,
            UserId: this.state.CurrentUser,
            UserName: this.state.UserName,
            Message: message,
            DateTime: new Date()
        };
        $.ajax({
            method: 'POST',
            url: './Chat/PostChat',
            data: JSON.stringify(messageObj),
            dataType: "json",
            contentType: "application/json; charset=utf-8"
        });
        $messageInput.value = '';
    },

    componentDidUpdate: function () {
        var $messageInput = $(ReactDOM.findDOMNode(this)).find('div[data-messages]');
        if ($messageInput.length) {
            $messageInput[0].scrollTop = $messageInput[0].scrollHeight;
        }
    },

    render: function () {
        var items = [];
        var i = 0;
        var userId;
        if (this.state.Messages.length) {
            for (; i < this.state.Messages.length; i++) {
                userId = this.state.Messages[i].UserId;
                if (userId === this.state.CurrentUser) {
                    items.push(React.createElement(ChatItemToOther, {
                        username: this.state.Messages[i].UserName,
                        datetime: this.state.Messages[i].DateTime,
                        text: this.state.Messages[i].Message, key: i
                    }));
                } else {
                    items.push(React.createElement(ChatItemToMe, {
                        username: this.state.Messages[i].UserName,
                        datetime: this.state.Messages[i].DateTime,
                        text: this.state.Messages[i].Message, key: i
                    }));
                }
            }
        }

        return React.createElement(
            'div',
            { className: 'chat-userContainer', id: this.props.userid },
            React.createElement(
                'div',
                { className: "chat-header clearfix" },
                React.createElement('img', { src: "https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_01_green.jpg", alt: "avatar" }),
                React.createElement(
                    'div',
                    { className: "chat-about" },
                    React.createElement(
                        'div',
                        { className: "chat-with" },
                        'Chat with ',
                        this.state.UserName
                    ),
                    React.createElement(
                        'div',
                        { className: "chat-num-messages" },
                        'already 1 902 messages'
                    )
                ),
                React.createElement('i', { className: "fa fa-star" })
            ),
            React.createElement(
                'div',
                { className: "chat-history" },
                React.createElement(
                    'ul',
                    null,
                    ' ',
                    items,
                    ' '
                )
            ),
            React.createElement(
                'div',
                { className: "chat-message clearfix" },
                React.createElement('textarea', { name: "message-to-send", id: "message-to-send", placeholder: "Type your message", rows: "3" }),
                React.createElement('i', { className: "fa fa-file-o" }),
                ' \xA0\xA0\xA0',
                React.createElement('i', { className: "fa fa-file-image-o" }),
                React.createElement(
                    'button',
                    { onClick: this.sendMessage },
                    'Send'
                )
            )
        );
    }

});
var MainChat = React.createClass({
    displayName: "MainChat",


    getInitialState: function () {
        return {
            ChatHub: $.connection.MainHub
        };
    },

    componentWillMount: function () {},

    render: function () {
        return React.createElement(ChatUsers, { chathub: this.state.ChatHub });
    }

});
ReactDOM.render(React.createElement(MainChat, null), document.getElementById('mainChatContainer'));