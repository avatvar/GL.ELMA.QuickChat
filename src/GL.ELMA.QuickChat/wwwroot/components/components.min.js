var ChatItem = React.createClass({
    displayName: 'ChatItem',


    render: function () {
        var itemStyle = 'chatItem';
        var userNameStyle = this.props.source === 'client' ? 'clientUserName' : 'serverUserName';
        var messageStyle = this.props.source === 'client' ? 'clientMessage' : 'serverMessage';

        return React.createElement(
            'div',
            null,
            React.createElement(
                'div',
                { className: itemStyle },
                React.createElement(
                    'div',
                    { className: userNameStyle },
                    this.props.username
                ),
                React.createElement(
                    'div',
                    { className: messageStyle },
                    this.props.text
                )
            )
        );
    }

});
var ChatUser = React.createClass({
    displayName: 'ChatUser',


    getInitialState: function () {
        return {
            UserId: this.props.userId,
            UserName: this.props.username,
            SendMessage: this.props.sendmessage,
            ChatHub: this.props.chathub,
            CurrentUser: this.props.currentUser
        };
    },

    addMessageWindow: function () {
        var chatWindow = document.getElementById(this.state.UserId);
        if (chatWindow == null) {
            ReactDOM.render(React.createElement(ChatWindow, { username: this.state.UserName,
                userid: this.state.UserId,
                sendmessage: this.state.SendMessage,
                chathub: this.state.ChatHub,
                currentUser: this.state.CurrentUser }), document.getElementById('ChatWindowContainer'));
        } else {
            if ($(chatWindow).css('display') === 'none') {
                $(chatWindow).css('display', 'block');
            } else {
                $(chatWindow).css('display', 'none');
            }
        }
    },

    render: function () {
        return React.createElement(
            'button',
            { onClick: this.addMessageWindow, key: $.guid++, className: 'userItem' },
            this.state.UserName
        );
    }

});
var ChatUsers = React.createClass({
    displayName: 'ChatUsers',


    getInitialState: function () {
        return {
            ChatHub: this.props.chathub,
            Users: [],
            SendMessage: this.props.sendmessage,
            CurrentUser: this.props.currentUser
        };
    },

    pushUserList: function () {},

    componentWillMount: function () {
        this.state.ChatHub.client.pushUserList = this.pushUserList;
        var component = this;
        $.getJSON('./Chat/GetUsers/').then(function (data) {
            var users = JSON.parse(data);
            component.setState({
                Users: users
            });
        });
    },

    render: function () {
        var userDivs = [];
        var i = 0;

        for (; i < this.state.Users.length; i++) {
            var user = this.state.Users[i];
            userDivs.push(React.createElement(ChatUser, { key: i, username: user.UserName, userId: user.UserId, currentUser: this.state.CurrentUser, chathub: this.state.ChatHub }));
        }

        return React.createElement(
            'div',
            { style: { overflow: 'hidden', display: 'block', float: 'left', padding: '2px' } },
            React.createElement(
                'h4',
                null,
                '\u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0438'
            ),
            userDivs
        );
    }

});
var ChatWindow = React.createClass({
    displayName: 'ChatWindow',


    getInitialState: function () {
        return {
            UserId: this.props.userId,
            UserName: this.props.username,
            SendMessage: this.props.sendmessage,
            ChatHub: this.props.chathub,
            Messages: [],
            CurrentUser: this.props.currentUser
        };
    },

    pushNewMessage: function (id, userId, userName, message, dateTime) {
        var msgs = this.state.Messages;
        msgs.push({
            Id: id,
            UserId: userId,
            UserName: userName,
            Message: message,
            DateTime: dateTime
        });
        this.setState({
            Messages: msgs
        });
    },

    componentWillMount: function () {
        this.state.ChatHub.client.pushNewMessage = this.pushNewMessage;
        if ($.connection.hub && $.connection.hub.state === $.signalR.connectionState.disconnected) {
            $.connection.hub.qs = { "currentUserId": this.state.CurrentUser };
            $.connection.hub.start();
        }
    },

    createGuid: function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0,
                v = c === 'x' ? r : r & 0x3 | 0x8;
            return v.toString(16);
        });
    },

    sendMessage: function () {
        var $messageInput = $(ReactDOM.findDOMNode(this)).find('input[data-message]');
        var message = $messageInput.val();
        var messageObj = {
            Id: this.createGuid(),
            ReceiverId: this.state.UserId,
            UserId: this.state.CurrentUser,
            UserName: this.state.UserName,
            Message: message,
            DateTime: new Date()
        };
        $.ajax({
            method: 'POST',
            url: './Chat/PostChat',
            data: JSON.stringify(messageObj),
            dataType: "json",
            contentType: "application/json; charset=utf-8"
        });
        $messageInput.val('');
    },

    componentDidUpdate: function () {
        var $messageInput = $(ReactDOM.findDOMNode(this)).find('div[data-messages]');
        if ($messageInput.length) {
            $messageInput[0].scrollTop = $messageInput[0].scrollHeight;
        }
    },

    render: function () {
        var items = [];
        var i = 0;
        var userId;
        if (this.state.Messages.length) {
            for (; i < this.state.Messages.length; i++) {
                userId = this.state.Messages[i].UserId;
                items.push(React.createElement(ChatItem, {
                    username: this.state.Messages[i].UserName,
                    datetime: this.state.Messages[i].DateTime,
                    source: userId === this.state.CurrentUser ? 'client' : 'server',
                    text: this.state.Messages[i].Message, key: i
                }));
            }
        }

        return React.createElement(
            'div',
            { id: this.props.userid, style: { display: 'block' } },
            React.createElement(
                'div',
                { style: { overflow: 'hidden' } },
                React.createElement(
                    'div',
                    { 'data-messages': true, className: 'messagesDiv' },
                    items
                ),
                React.createElement(
                    'div',
                    { style: { display: 'block', width: '84%' } },
                    React.createElement('input', { type: 'text', style: { width: 'inherit' }, 'data-message': true }),
                    ' \xA0 ',
                    React.createElement(
                        'a',
                        { onClick: this.sendMessage, href: '#' },
                        '\u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C'
                    )
                )
            )
        );
    }

});
var MainChat = React.createClass({
    displayName: 'MainChat',


    getInitialState: function () {
        return {
            ChatHub: $.connection.MainHub,
            Messages: [],
            UserName: '',
            UserId: '00000000-0000-0000-0000-000000000000'
        };
    },

    initializeUser: function () {
        var component = this;
        $.getJSON('./Chat/GetCurrentUser/').then(function (data) {
            component.setState({
                UserName: data.UserName,
                UserId: data.Id
            });
        });
    },

    componentWillMount: function () {
        this.initializeUser();
    },

    render: function () {
        return React.createElement(
            'div',
            null,
            React.createElement(ChatUsers, { chathub: this.state.ChatHub, sendmessage: this.sendMessage, currentUser: this.state.UserId }),
            React.createElement('div', { id: 'ChatWindowContainer' })
        );
    }

});
ReactDOM.render(React.createElement(MainChat, null), document.getElementById('container'));